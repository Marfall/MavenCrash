Maven  под Windows:

- CP - Edit system environment variables: 
    1) new , name JAVA_HOME  - jdk_path
    2) Path - edit - new  - maven_path\bin 
    3) cmd -   mvn --version

MAC OS: 
    brew install maven  (Need homebrew)
    или
    check environment variable value:

    echo %JAVA_HOME
    /Library/Java/JavaVirtualMachines/jdk1.8.0_45/Contents/

    Adding to PATH:
    export PATH=/opt/apache-maven-3..0/bin:$PATH

LINUX:

    sudo apt install maven
    export PATH=/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin:$PATH
    export JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64
    echo $JAVA_HOME

MAVEN CONSOLE APPLICATION:

 - mvn archetype:generate - заготовка, генарация maven-проекта(stub-project)

 tree - структура в виде дерева

 mvn compile - компиляция проекта (из коревой папки проекта) - создаст папку target,
              в которой будут уже скопилированные классы

 mvn test    - запуск тестов из maven, а также в папке surefire-reports даст результаты тестов

 mvn paсkage - создаст JAR в корне target

 java -cp target/lessons-1.0-SNAPSHOT.jar com.max.App     - запуск (файл JAR + Main-class)

 java -cp target/MvnProject-1.0-SNAPSHOT.jar  Main   - сборка с Idea

 Convention Over Configuration - все уже сконфигурировано, maven сам знает где и что лежит

 Архетип - заготовленное решение,от которого можно наследоваться

 GroupId - название компании (com.google)

 ArtifactId - название проекта


PLUGINS AND GOALS:

MAVEN - на самом деле просто парсит XML и передает упрвление плагинам, из которых 
        maven и состоит. Каждый плагин состоит из целей (goal- mojo)
    
Запуск плагинов:
    
    -нельзя запустить просто плагин - нужно запустить на нем какую-то конкретную цель

    mvn compiler: compile  - берет все файлы из папки java, компилирует их и кладет в target

    mvn help:describe -Dplugin=help  - запуск плагина help c целью describe  и в него передаем параметр с именем plugin
                                   Цель при запуске попробует найти параметр с именем help. Когда найдет,
                                   возьмет всю документацию по нему и выведет с именем всех целей,  которые есть в 
                                   этом плагине.

    mvn helo:help
    mvn help:system                - запуск целей
    mvn:all-profiles

    mvn help:describe -Dplugin=compiler -Dgoal=compile -Ddetail
        - описание плагина  compiler  и его конкретной цели  compile,  с полным описанием цели

    
    ЖИЗНЕННЫЙ ЦИКЛ СБОРКИ:

    Основные:

    -clean
    -default
    -site 

    mvn recorces:resources - скопирует файлы из ресурсов в  target/classes

    mvn clean   -  удалит  target

    surfare -  плагин для тестов

    mvn resources:resources compiler:compile   -  скомпилировать и скопировать ресурсы 

    Lifecycle -  набор плагинов, запускаемых друг за другом для того чтобы выполнить какие-то действия кратко.
                 По сути,  это быстрые команды, чтобы не писатть вызовы плагинов и целей.

    CLEAN:  

        -   mvn clean:clean - удаляет папку  target, стадии, каждая из которых прикручена на определенный плагин:

                -pre-clean
                -clean
                -post-clean   (можно в pom-нике прикрутить какую-то логику)

    DEFAULT LIFECYCLE:

        (при запуске какой-то из стадий,  обязательно запустятся все предыдущие)

        deploy -  возможность деплоя на какой-либо сервер

        site -  отдельная стадия,  делает документацию.

        test - можно отключить (skip-tests mode)


    POM.XML     - Project Object Model

        - Собственные  pom  наследуются от super-pom,  поэтому все настройки уже сконфигурированы, 
          но их можно переопределять.  

        - Переопределение настроек на  resources:

            <build>
                <resources>
                    <directory>
                        ${project.basedir}/src/main/customdir      //папка с ресурсами переопределена
                    </directory>
                </resources>
            </build>

    EFFECTIVE POM - смесь super-pom и application - список абсолютно всех настроек:

         - mvn help:effective-pom        //  покажет его


    
    MAVEN PROPERTIES:

    ${} -  вставить не-хардкод значение

        <version>${project.groupId}-beta</version>   в pom.properties - после  package

        Также сюда можно пописывать переменные среды:

            export hello=world
            echo $hello             

       После этого ее можно вставить - <version>${hello}</version>    

       <version>${env.JAVA_HOME}</version>    // обратиться к переменной среды

       Также можно использовать ${settings.*}   -  из файла  settings.XML

       Собственные  properties:

       <properties>
            <myVersion>1.2</myVersion>
       </properties>
 
        
    НАСТРОЙКА  ИНФОРМАЦИИ О ПРОЕКТЕ:

        - есть настройки чисто описательные - ничего не делают, на процесс
          билда и сборки никак не влияют:

            <name>lessons</name>
            <url>youtube.com</url>
            <licenses>
                <name>some name</name>
                <url>example</url>
                <distribution>repo</distribution>
                <comments>some comment</comments>
            </licenses>

            <organization>
                <url>apache.com</url>
                <name>apache</name>
            </organization>

            <developers>
                <developer>
                    <name>Max</name>
                    <url>example.com</url>
                    <timezone>-3</timezone>
                    <email>example@mail.com</email>
                    <roles>
                        <role>
                            developer
                        </role>
                    </roles>
                    <id></id>
                </developer>
            </developers>


    DEPENDENCIES:

        - качает блиблиотеки со своих репозиториев
        - есть 4-й параметр packaging, по умолчанию  jar, можно менять на  war,zip,pom

        /home/user/.m2 - здесь лежат все скачанные библиотеки (скрыта)


    DEPENDENCY SCOPE:

        -cp    -  ключ-classpath

         Синтаксис команды запуска JAR c  консоли:

         java -cp <target/JAR-name> <main-class-name>  - с  project-root target/jar-name 

         //ex:

         java -cp target/MvnProject-1.7.jar Main

    Если какие-то dependencies  нужны только на стадии компиляции,  а какие-то только 
    на запуске,  то для этого существует параметр SCOPE:

    <scope>compile</scope>  - default - подключена на всех этапах

    scope - provided -  только на этапе компиляции,  при запуске не используется (в runtime  не достать)

    scope - runtime -  наоборот,  только в рантайме

    scope - system -    аналог  provided - только модно еще указать <systemPath> -  где лежит  JAR

    scope - test  -  подключает данную библиотеку только для тестирования

    scope - import -  можно подключить другую библиотеку, которая будет не  JAR, а POM 

    Сущетвует заблуждение,  что если используется  compile ,  то  log4j  окажется  в  JAR, это Не так.
    В  WAR  окажется.

    Плагин для автосбор зависимостей в JAR:

         <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                            </transformers>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>



    OPTIONAL DEPENDENCY:

        - Когда есть необходимость не подключать  dependency  везде.
          И нужно подгружать только конкретные  dependency.
          <optional>true</optional>   -  нужно подключать вручную

          => Во втором проекте:

          <dependency>
            <groupId>com.max</groupId>
            <artifactId>lessons</artifactId>
            <version>1.0-SNAPSHOT</version>
          </dependency> 

          => Во втором проекте  optional - dependence  нужно прописывать вручную


    VERSON RANGE:

        Промежутки версий <version>(1.2.10,1.2.12)</version>            

            ()  -   не включительно
            []  -   включительно


    ТРАНЗИТИВНЫЕ DEPENDENCY:

        - У каждой зависимости могут быть свои зависиости и они их могут скачивать.    
          И те зависимости ,  на которые не тпряых ссылок называютя транзитивными.

          mvn dependency:resolve   -  показать транзитивные зависимости
          mvn dependency:tree   -  показать в виде дерева
          mvn dependency:analyze -  анализ зависимостей (например, покажет ненужные)


    ИСКЛЮЧЕНИЕ  ТРАНЗИТИВНЫХ DEPENDENCY:


          <exclusions>
            <exclusion>
                <groupId>oro</groupId>           // приведет к отсутсвию зависимости
                <artifactId>oro</artifactId>
                <version>2.0.8</version>
            </exclusion>
          </exclusions>


    МУЛЬТИМОДУЛЬНОСЬ, НАСЛЕДОВАНИЕ В MAVEN:

        - позволяет разбивать проект на модули
        - new - Module - (Inherit)  - выбираем от кого наследовать - будет parent-pom

            => В главном pom-файле появляется 
            
            <modules>
                <module>
                    secondProject
                </module>
            </modules>

        POM-наследник переопределяет только ArtifactId

        mvn help:effective-pom  -    построить результирующий  pom для модуля

        - Можно переопределять  build-процесс

        - Каждый из этих модулей можно билдить отдельно 
          (нет смысла пересобирать отдельные модули)

        - parent  сбилдит сразу все


    DEPENDENCY MANAGEMENT:

        -  Например - если нужно, чтобы во всех модулях была одна  и та же
           версия зависимости.

           <dependencyManagenent>
                <dependencies>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                    <version>1.2.17</version>
                </dependencies>
           </dependencyManagenent>


        - Теперь во всех модулях можно добавлять эту зависимость, не указывая версию,
          она будет забираться из parent.


    EXEC PLUGIN

        - позволяет запускать код через  Maven.

        1) mvn clean package

        2) mvn exec:java -Dexec.mainClass=Main  - запуск 


    JETTY PLUGIN:

        - Позволяет запускать WEB- приложения (war с помощью плагина без  Tomcat)

        - Добавляем <packaging>war</packaging>

        - Добавляем плагин:

            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <version>9.4.6.v20170531</version>
                    </plugin>
                </plugins>
            </build>

    
    MAVEN PROFILES:

        - Может быть несколько профилей, в которых делаются разные настройки:

        <profiles>
            <profile>
                <id>dev</id>
                <build>
                    <resources>
                        <resource>
                            <directory>${baseDir}/src/main/mn</directory>
                        </resource>
                    </resources>
                </build>
            </profile>
            <profile>
                <id>prod</id>
                <build>
                    <resources>
                        <resource>
                            <directory>${baseDir}/src/main/newRes</directory>
                        </resource>
                    </resources>
                </build>
            </profile>
        </profiles>


    => Можно запустить все это под конкретным  profile

     mvn clean package -Pdev    -  собрать приложение под профилем "dev"

    - Аналогичный вариант с внешним файлом profiles.xml - в корне проекта:

    <profilesXml xmlns="http://maven.apache.org/PROFILES/1.0.0">
        <profiles>
            <profile>
                <id>test</id>
            </profile>
        </profiles>
    </profilesXml>


    ВЕРСИОНИРОВАНИЕ ИЗ ПОД ОПРЕДЕЛЕННОГО PROFILE (PROPERTIES):

    - здесь под профилем dev будет подставлен "qwe" - version

    - Вариант использования такой схемы - подстановка паролей - прописать в  properties,
    а потом тянуть

     <groupId>org.example</groupId>
    <artifactId>profiletest</artifactId>
    <version>1.0-SNAPSHOT-${myversion}</version>


    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <myversion>qwe</myversion>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${baseDir}/src/main/mn</directory>
                    </resource>
                </resources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <source>11</source>
                            <target>11</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <version>9.4.6.v20170531</version>
                    </plugin>
                </plugins>
            </build>
        </profile>


ПАРАМЕТР  ACTIVATION:

    <activation>
        <jdk>1.8</jdk>
    </activation>
 
    - здесь, если JDK 1.8 -  то он будет запущен

    <activeByDefault>true</activeByDefault>   // активация  профиля по умолчанию

    <os><family>unix</family></os>            //  по операционной системе (если *nix -  то  default)



    ФИЛЬТРАЦИЯ РЕСУРСОВ:


    