Maven  под Windows:

- CP - Edit system environment variables: 
    1) new , name JAVA_HOME  - jdk_path
    2) Path - edit - new  - maven_path\bin 
    3) cmd -   mvn --version

MAC OS: 
    brew install maven  (Need homebrew)
    или
    check environment variable value:

    echo %JAVA_HOME
    /Library/Java/JavaVirtualMachines/jdk1.8.0_45/Contents/

    Adding to PATH:
    export PATH=/opt/apache-maven-3..0/bin:$PATH

LINUX:

    sudo apt install maven
    export PATH=/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin:$PATH
    export JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64
    echo $JAVA_HOME

MAVEN CONSOLE APPLICATION:

 - mvn archetype:generate - заготовка, генарация maven-проекта(stub-project)

 tree - структура в виде дерева

 mvn compile - компиляция проекта (из коревой папки проекта) - создаст папку target,
              в которой будут уже скопилированные классы

 mvn test    - запуск тестов из maven, а также в папке surefire-reports даст результаты тестов

 mvn paсkage - создаст JAR в корне target

 java -cp target/lessons-1.0-SNAPSHOT.jar com.max.App     - запуск (файл JAR + Main-class)

 java -cp target/MvnProject-1.0-SNAPSHOT.jar  Main   - сборка с Idea

 Convention Over Configuration - все уже сконфигурировано, maven сам знает где и что лежит

 Архетип - заготовленное решение,от которого можно наследоваться

 GroupId - название компании (com.google)

 ArtifactId - название проекта


PLUGINS AND GOALS:

MAVEN - на самом деле просто парсит XML и передает упрвление плагинам, из которых 
        maven и состоит. Каждый плагин состоит из целей (goal- mojo)
    
Запуск плагинов:
    
    -нельзя запустить просто плагин - нужно запустить на нем какую-то конкретную цель

    mvn compiler: compile  - берет все файлы из папки java, компилирует их и кладет в target

    mvn help:describe -Dplugin=help  - запуск плагина help c целью describe  и в него передаем параметр с именем plugin
                                   Цель при запуске попробует найти параметр с именем help. Когда найдет,
                                   возьмет всю документацию по нему и выведет с именем всех целей,  которые есть в 
                                   этом плагине.

    mvn helo:help
    mvn help:system                - запуск целей
    mvn:all-profiles

    mvn help:describe -Dplugin=compiler -Dgoal=compile -Ddetail
        - описание плагина  compiler  и его конкретной цели  compile,  с полным описанием цели

    
    ЖИЗНЕННЫЙ ЦИКЛ СБОРКИ:

    Основные:

    -clean
    -default
    -site 

    mvn recorces:resources - скопирует файлы из ресурсов в  target/classes

    mvn clean   -  удалит  target

    surfare -  плагин для тестов

    mvn resources:resources compiler:compile   -  скомпилировать и скопировать ресурсы 

    Lifecycle -  набор плагинов, запускаемых друг за другом для того чтобы выполнить какие-то действия кратко.
                 По сути,  это быстрые команды, чтобы не писатть вызовы плагинов и целей.

    CLEAN:  

        -   mvn clean:clean - удаляет папку  target, стадии, каждая из которых прикручена на определенный плагин:

                -pre-clean
                -clean
                -post-clean   (можно в pom-нике прикрутить какую-то логику)

    DEFAULT LIFECYCLE:

        (при запуске какой-то из стадий,  обязательно запустятся все предыдущие)

        deploy -  возможность деплоя на какой-либо сервер

        site -  отдельная стадия,  делает документацию.

        test - можно отключить (skip-tests mode)


    POM.XML     - Project Object Model

        - Собственные  pom  наследуются от super-pom,  поэтому все настройки уже сконфигурированы, 
          но их можно переопределять.  

        - Переопределение настроек на  resources:

            <build>
                <resources>
                    <directory>
                        ${project.basedir}/src/main/customdir      //папка с ресурсами переопределена
                    </directory>
                </resources>
            </build>

    EFFECTIVE POM - смесь суперпома и собственного - список абсолютно всех настроек:

         - mvn help:effective-pom        //  покажет его


    
    MAVEN PROPERTIES:

    ${} -  вставить не-хардкод значение

        <version>${project.groupId}-beta</version>   в pom.properties - после  package

        Также сюда можно пописывать переменные среды:

            export hello=world
            echo $hello             

       После этого ее можно вставить - <version>${hello}</version>    

       <version>${env.JAVA_HOME}</version>    // обратиться к переменной среды

       Также можно использовать ${settings.*}   -  из файла  settings.XML

       Собственные  properties:

       <properties>
            <myVersion>1.2</myVersion>
       </properties>
 
        
    НАСТРОЙКА  ИНФОРМАЦИИ О ПРОЕКТЕ:

        - есть настройки чисто описательные - ничего не делают, на процесс
          билда и сборки никак не влияют:

            <name>lessons</name>
            <url>youtube.com</url>
            <licenses>
                <name>some name</name>
                <url>example</url>
                <distribution>repo</distribution>
                <comments>some comment</comments>
            </licenses>

            <organization>
                <url>apache.com</url>
                <name>apache</name>
            </organization>

            <developers>
                <developer>
                    <name>Max</name>
                    <url>example.com</url>
                    <timezone>-3</timezone>
                    <email>example@mail.com</email>
                    <roles>
                        <role>
                            developer
                        </role>
                    </roles>
                    <id></id>
                </developer>
            </developers>


    DEPENDENCIES:


        